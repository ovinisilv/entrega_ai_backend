datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PixKeyType {
  CPF_CNPJ
  EMAIL
  CELULAR
  ALEATORIA
}

enum Role {
  CLIENTE
  MOTOBOY
  RESTAURANTE
  ADMIN
}

enum OrderStatus {
  PENDENTE
  PAGO
  EM_PREPARO
  PRONTO_PARA_ENTREGA
  EM_ROTA
  ENTREGUE
  CANCELADO
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  name       String
  password   String
  role       Role        @default(CLIENTE)
  balance    Float       @default(0)
  fcmToken   String?
  pixKey     String?     // <-- ADICIONE ESTA LINHA
  pixKeyType PixKeyType? // <-- ADICIONE ESTE CAMPO
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  restaurant Restaurant?
  orders     Order[]
  deliveries Order[]     @relation("Deliveries")
}

model Restaurant {
  id           String    @id @default(uuid())
  name         String
  address      String
  imageUrl     String?
  isOpen       Boolean   @default(false)
  isApproved   Boolean   @default(false)
  balance      Float     @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  owner        User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String    @unique
  dishes       Dish[]
  orders       Order[]
}

model Dish {
  id           String      @id @default(uuid())
  name         String
  description  String
  price        Float
  imageUrl     String?
  isAvailable  Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  orderItems   OrderItem[]
}

model Order {
  id              String      @id @default(uuid())
  totalPrice      Float
  deliveryAddress String
  deliveryDistance  Float? // <-- DistÃ¢ncia em KM (opcional)
  deliveryFee       Float? // <-- Taxa de entrega calculada (opcional)
  status          OrderStatus @default(PENDENTE)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId    String
  deliveryBy      User?       @relation("Deliveries", fields: [deliveryById], references: [id])
  deliveryById    String?
  items           OrderItem[]
  
}

model OrderItem {
  id         String  @id @default(uuid())
  quantity   Int
  price      Float
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  dish       Dish    @relation(fields: [dishId], references: [id], onDelete: Cascade)
  dishId     String
}
